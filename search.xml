<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>同花顺笔试题</title>
      <link href="/2020/04/03/%E5%90%8C%E8%8A%B1%E9%A1%BA%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2020/04/03/%E5%90%8C%E8%8A%B1%E9%A1%BA%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>记一次同花顺golang笔试题    </p><h4 id="题目一：读取文件重复行"><a href="#题目一：读取文件重复行" class="headerlink" title="题目一：读取文件重复行"></a>题目一：读取文件重复行</h4><pre><code>import (    &quot;os&quot;    &quot;bufio&quot;)func getRepeatedLines(file string) map[string]bool {    fd, err := os.Open(file)    if err != nil {        return nil    }    stream := bufio.NewReader(fd)    for {        line, err := stream.ReadBytes(&#39;\n&#39;)        if err != nil {            return nil        }        _, ok := storeLines[line]        if ok == false {            storeLines[line] = true        }    }    return storeLines}</code></pre><h4 id="题目二：slice由哪几个部分构成？"><a href="#题目二：slice由哪几个部分构成？" class="headerlink" title="题目二：slice由哪几个部分构成？"></a>题目二：slice由哪几个部分构成？</h4><p>如下代码输出为？</p><pre><code>s := []int{}fmt.Println(s == nil)</code></pre><h4 id="题目三：反转整数数组的顺序"><a href="#题目三：反转整数数组的顺序" class="headerlink" title="题目三：反转整数数组的顺序"></a>题目三：反转整数数组的顺序</h4><pre><code>func revert(nums []int) []int {    if len(nums) == 0 {        return nums    }    for i := 0; i &lt; len(nums)/2; i++ {        nums[i], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[i]    }    return nums}</code></pre><h4 id="题目四：协程和线程的区别"><a href="#题目四：协程和线程的区别" class="headerlink" title="题目四：协程和线程的区别"></a>题目四：协程和线程的区别</h4><p>1、协程由线程调度管理<br>2、协程间切换由用户态代码实现，线程间切换由内核态切换实现<br>3、协程内存占用少   </p><h4 id="题目五：想要并发输出0-9，以下代码是否存在问题，应该如何改进呢？"><a href="#题目五：想要并发输出0-9，以下代码是否存在问题，应该如何改进呢？" class="headerlink" title="题目五：想要并发输出0-9，以下代码是否存在问题，应该如何改进呢？"></a>题目五：想要并发输出0-9，以下代码是否存在问题，应该如何改进呢？</h4><pre><code>package mainimport &quot;fmt&quot;func main() {    for i := 0; i &lt; 10; i++ {        go func() {            fmt.Println(i)        }()    }}</code></pre><h4 id="题目六：分享下项目中goroutine泄露的排查经历-or-手写一段goroutine泄露代码"><a href="#题目六：分享下项目中goroutine泄露的排查经历-or-手写一段goroutine泄露代码" class="headerlink" title="题目六：分享下项目中goroutine泄露的排查经历 or 手写一段goroutine泄露代码"></a>题目六：分享下项目中goroutine泄露的排查经历 or 手写一段goroutine泄露代码</h4><h4 id="题目七：修改以下代码，实现并发安全的cache机制，如果可以实现重复抑制（同一资源只有一个goroutine请求）可加分（不需要考虑cache更新问题和LRU）"><a href="#题目七：修改以下代码，实现并发安全的cache机制，如果可以实现重复抑制（同一资源只有一个goroutine请求）可加分（不需要考虑cache更新问题和LRU）" class="headerlink" title="题目七：修改以下代码，实现并发安全的cache机制，如果可以实现重复抑制（同一资源只有一个goroutine请求）可加分（不需要考虑cache更新问题和LRU）"></a>题目七：修改以下代码，实现并发安全的cache机制，如果可以实现重复抑制（同一资源只有一个goroutine请求）可加分（不需要考虑cache更新问题和LRU）</h4><pre><code>package mainimport (    &quot;io/ioutil&quot;    &quot;net/http&quot;)func main() {    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) {        r.ParseForm()        if len(r.Form[&quot;url&quot;]) &gt; 0 {            body, _ := fetch(r.Fomr[&quot;url&quot;][0])            w.Writer(body)        }    })    http.ListenAndServe(&quot;:8000&quot;, nil)}func fetch(url string) ([]byte, error) {    resp, err := http.Get(url)    if err != nil {        return nil, err    }    defer resp.Close()    return ioutil.ReadAll(resp.body)}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关爱儿童成长</title>
      <link href="/2020/03/02/%E5%85%B3%E7%88%B1%E5%84%BF%E7%AB%A5%E6%88%90%E9%95%BF/"/>
      <url>/2020/03/02/%E5%85%B3%E7%88%B1%E5%84%BF%E7%AB%A5%E6%88%90%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/03/01/32abAe.jpg" alt="小委托人"></p><h1 id="《小委托人》"><a href="#《小委托人》" class="headerlink" title="《小委托人》"></a>《小委托人》</h1><h2 id><a href="#" class="headerlink" title></a></h2><p>本着消磨时间的打算，看了这部早早下载却一直在手机里吃灰的《小委托人》，很难受。我想，影片中暴露在我眼前的这些罪行，也许只是冰山下的一角。法律所统计到的受伤害的孩子，也许还有不少在忍受煎熬。  </p><h2 id="愤怒"><a href="#愤怒" class="headerlink" title="愤怒"></a>愤怒</h2><p> 对于感性的我，看到这些施虐的画面时，心中涌起愤怒。明明这些应当在阳光下肆意欢笑的孩子，为什么却胆怯地缩在阴暗地房间一角，瑟瑟发抖。当“娃娃鱼”用锤子砸开那一家的房门时，面对着施虐完的继母，我都在屏幕前挥舞着我的拳头。</p><h2 id="无助"><a href="#无助" class="headerlink" title="无助"></a>无助</h2><p>然而，面对着影片结束后的字幕，“但绝大多数施暴者都被判以缓期执行或罚款”，我陷入了迷惘，被一种无力感包围。若是对这些施暴者的罪恶行为加以重刑，那么孩子的抚养该怎么办？倘若爷爷奶奶辈无能力或无意愿抚养，难道指望现有的社会福利去收养如此之多的受害儿童？</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>个人观点：应当对这些证据确凿的施虐父母，处以重刑，并在刑满释放后，加以类似电子镣铐之类的器件，标签化这些“施虐”者的罪犯。<br>个人困惑：如何处理孩子的抚养问题？若是仅仅对“施虐者”判期缓刑或罚款，我相信这绝不是处罚，而是纵容这些罪恶行为。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>斗胆提出以下几点，不知是否合理。<br>1）杜绝根因：对现有法律施虐儿童的章节，重新review，不合适处重新拟制，并通过微信、头条等社交媒体，广而告之这点。<br>2）加强对儿童福利机构的人员考核。对于这类机构，绝不允许“关系户”和“养老户”上岗。并对有把握的受害家庭，儿童机构人员有权利要求警力人员配合调查案件。<br>3）对于定罪的犯案人员，处以重刑，并在刑满释放后，在3~5年内标签化这类人员，剥夺其儿童抚养权。</p><h2 id="附注："><a href="#附注：" class="headerlink" title="附注："></a>附注：</h2><p>其他诸如培训关爱儿童志愿者的想法，还不成熟，暂且不叙。  </p><p>注：影片中旁人的冷漠和精英阶层对底层人民视作“蚂蚁的”观点，此处暂不展开，后续有感再详述。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go.1.13新特性</title>
      <link href="/2020/02/11/Go-1-13%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/02/11/Go-1-13%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>《goproxy.cn - 为中国 Go 语言开发者量身打造的模块代理》整理<br><a href="https://segmentfault.com/a/1190000020293616?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020293616?utm_source=tag-newest</a></p><h1 id="Go-1-13-新特性说明"><a href="#Go-1-13-新特性说明" class="headerlink" title="Go 1.13 新特性说明"></a><strong>Go 1.13 新特性说明</strong></h1><h2 id="一、关于Module"><a href="#一、关于Module" class="headerlink" title="一、关于Module"></a><strong>一、关于Module</strong></h2><h3 id="1、前情提要"><a href="#1、前情提要" class="headerlink" title="1、前情提要"></a><strong>1、前情提要</strong></h3><p>Go Modules最早发布于1.11版本。随着一起发布的还有Module proxy protocol 协议，通过该协议可以搭建Go模块代理，最后交由GOPROXY环境变量，指引go命令后续在抓取模块时的途径。</p><h3 id="2、GOPROXY"><a href="#2、GOPROXY" class="headerlink" title="2、GOPROXY"></a><strong>2、GOPROXY</strong></h3><p>1.13版本将GOPROXY默认为<a href="https://proxy.golang.org" target="_blank" rel="noopener">https://proxy.golang.org</a><br>(大陆不可访问)故中国开发者需要修改GORROXY后再开发。七牛云提供了一个Go模块代理：goproxy.cn</p><h3 id="3、使用goproxy-cn"><a href="#3、使用goproxy-cn" class="headerlink" title="3、使用goproxy.cn"></a><strong>3、使用goproxy.cn</strong></h3><p>命令：go env -w GOPROXY=<a href="https://goproxy.cn,direct" target="_blank" rel="noopener">https://goproxy.cn,direct</a><br>direct：解决访问私有库问题。当go抓取目标模块404时，就回退到direct，即目标模块的源头，去抓取</p><h3 id="4、私有库访问"><a href="#4、私有库访问" class="headerlink" title="4、私有库访问"></a><strong>4、私有库访问</strong></h3><p>关于GOPROXY中的direct字段，并不是一个完美的私有库访问问题的解决方案。<br>GONOPROXY环境变量，通过设置该变量可以控制哪些module path能忽略GOPROXY，无脑回源。<br>如：GONOPROXY=*.corp.example.com 意味着go在抓取所有corp.example.com的三级子域名下的所有模块时都将忽略GOPROXY设置，而直接回源到目标模块的源地址</p><h3 id="5、GOSUMDB"><a href="#5、GOSUMDB" class="headerlink" title="5、GOSUMDB"></a><strong>5、GOSUMDB</strong></h3><p>功能：防止从公共模块代理中抓取的模块被篡改<br>默认值：sum.golang.org<br>原理：go将在抓取完所有模块时，对所有模块进行哈希校验，只有校验值和数据库中现有值一致时，才算抓取成功。<br>GONOSUMDB：控制go应该忽略校验哪些module path下的模块</p><h3 id="GOPRIVATE"><a href="#GOPRIVATE" class="headerlink" title="GOPRIVATE"></a><strong>GOPRIVATE</strong></h3><p>简单地理解为设置该变量，即同时设置了GONOPROXY和GONOSUMDB</p><h2 id="二、关于defer"><a href="#二、关于defer" class="headerlink" title="二、关于defer"></a><strong>二、关于defer</strong></h2><p>待续</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang简易版发布订阅</title>
      <link href="/2020/01/31/golang%E7%AE%80%E6%98%93%E7%89%88%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/2020/01/31/golang%E7%AE%80%E6%98%93%E7%89%88%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h1 id="golang简易版发布订阅模型"><a href="#golang简易版发布订阅模型" class="headerlink" title="golang简易版发布订阅模型"></a>golang简易版发布订阅模型</h1><p>转载自《Go语言高级编程》  </p><h2 id="source-code"><a href="#source-code" class="headerlink" title="source code"></a>source code</h2><h3 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h3><pre class="line-numbers language-golang"><code class="language-golang">package pubsubimport (    "sync"    "time")type (    subscriber chan interface{}         // 订阅者为一个管道    topicFunc  func(v interface{}) bool //主题为一个过滤器)// 发布者对象type Publisher struct {    m           sync.RWMutex    buffer      int    timeout     time.Duration    subscribers map[subscriber]topicFunc // 订阅者对象}// 订阅一个发布者对象，可设置发布超时时间和缓存队列的长度func NewPublisher(publishTimeout time.Duration, buffer int) *Publisher {    return &Publisher{        buffer:      buffer,        timeout:     publishTimeout,        subscribers: make(map[subscriber]topicFunc),    }}// 添加一个新的订阅者，订阅全部主题func (p *Publisher) Subscribe() chan interface{} {    return p.SubscribeTopic(nil)}// 添加一个新的订阅者，订阅过滤器筛选后的主题func (p *Publisher) SubscribeTopic(topic topicFunc) chan interface{} {    ch := make(chan interface{}, p.buffer)    p.m.Lock()    p.subscribers[ch] = topic    p.m.Unlock()    return ch}// 退出订阅func (p *Publisher) Evict(sub chan interface{}) {    p.m.Lock()    defer p.m.Unlock()    delete(p.subscribers, sub)    close(sub)}// 发布一个主题func (p *Publisher) Publish(v interface{}) {    p.m.Lock()    defer p.m.Unlock()    var wg sync.WaitGroup    for sub, topic := range p.subscribers {        wg.Add(1)        go p.sendTopic(sub, topic, v, &wg)    }    wg.Wait()}// 关闭发布者对象，同时关闭所有的订阅者管道func (p *Publisher) Close() {    p.m.Lock()    defer p.m.Unlock()    for sub := range p.subscribers {        delete(p.subscribers, sub)        close(sub)    }}// 发送主题，可以容忍一定的超时func (p *Publisher) sendTopic(sub subscriber, topic topicFunc, v interface{}, wg *sync.WaitGroup) {    defer wg.Done()    if topic != nil && !topic(v) {        return    }    select {    case sub <- v:    case <-time.After(p.timeout):    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><pre class="line-numbers language-golang"><code class="language-golang">import "pubsub"func main() {    p := pubsub.NewPublisher(100*time.Millsecond, 10)    defer p.close()    all := p.Subscribe()    golang := p.Subscribe(func(v interface{}) bool {        if s, ok := v.(string); ok { // x.(T) 类型断言            return strings.Contains(s, "golang")        }        return false    })    p.Publish("hello world!")    p.Publish("hello golang!")    go func() {        for msg := range all {            fmt.Println("all:", msg)        }    } ()    go func() {        for msg := range golang {            fmt.Println("golang:", msg)        }    } ()    time.Sleep(3*time.Second)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 发布订阅模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R.I.P For Kobe Bryant</title>
      <link href="/2020/01/27/rip4kobe/"/>
      <url>/2020/01/27/rip4kobe/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/01/27/gdYVhI4rDMRUzKj.jpg" alt="youngkobe.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>闲聊记事（一）</title>
      <link href="/2020/01/27/%E9%97%B2%E8%81%8A%E8%AE%B0%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/01/27/%E9%97%B2%E8%81%8A%E8%AE%B0%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="关于新型冠状病毒"><a href="#关于新型冠状病毒" class="headerlink" title="关于新型冠状病毒"></a>关于新型冠状病毒</h2><p>截至到现在（1月26日 23：31），丁香网实时统计的全国确诊人数已达2076例。从前，这些数字，我往往无感，总觉得太遥远。如今，这些数字却化为了恐惧，如同羊水般包裹在周围。   </p><p>我一直以为自己不怕死，看来还是高估了自己。现在才发现，如果人都是突然间死亡的，那么怕是没有人会恐惧死亡。最令人害怕的，还是死亡逼近的过程，亦或是拖拉着镰刀而来的死神，一步步靠近。这种感觉，真tn的刺激。   </p><p>今日凌晨刷虎扑，不时看到几个放出口罩链接的帖子，每每点击进去一看，都是售罄。明日还是去劳保市场看看是否有口罩卖吧。   </p><h2 id="关于春节"><a href="#关于春节" class="headerlink" title="关于春节"></a>关于春节</h2><p>现在还是庚子年元月初二，晚上也草草地回到了杭州。回到房间后，从没聊过天的室友们，一个都没回来，也是哦，这个点都是在家里。寻摸着一个便利店买了一大瓶水后，便又回了房间。   </p><p>今年，哦不，去年的大年三十，对即将来到的新的一年完全没有期盼，因此也没有许愿的念头。偶尔的祝福短信，也礼貌而简洁地回复了。   </p><p>至于为什么会这样，我想是2019年过的并不如意。年初、年中，工作上各种波折、失意；年末，生活上又遭遇打击。想了想，现在也算是心态好。安于现状，但也试图改变。   </p><p>好在，我也完全不记得前年许下的愿望，所以就让失意的2019失忆下去吧。生活的琐事总是不记得这也是我为数不多的优点了。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>摸鱼摸到初三凌晨了，略有睡意。ipad上的爱情公寓5这一集也快放完了，那就洗洗睡吧。    </p><p><img src="https://i.loli.net/2020/01/27/rKYtTXmngJkUpa8.jpg" alt="晚安.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
